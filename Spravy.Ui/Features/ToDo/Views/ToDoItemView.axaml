<ru:ReactiveUserControl x:TypeArguments="vm:ToDoItemViewModel"
                        xmlns="https://github.com/avaloniaui"
                        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                        xmlns:ru="http://reactiveui.net"
                        xmlns:mi="clr-namespace:Material.Icons.Avalonia;assembly=Material.Icons.Avalonia"
                        xmlns:md="https://github.com/whistyun/Markdown.Avalonia"
                        xmlns:s="clr-namespace:Spravy.Ui.Services"
                        xmlns:c="clr-namespace:SukiUI.Controls;assembly=SukiUI"
                        xmlns:vm="clr-namespace:Spravy.Ui.Features.ToDo.ViewModels"
                        xmlns:v="clr-namespace:Spravy.Ui.Features.ToDo.Views"
                        xmlns:m="clr-namespace:Spravy.Ui.Features.ToDo.Models"
                        xmlns:co="clr-namespace:SukiUI.Content;assembly=SukiUI"
                        xmlns:sm="clr-namespace:Spravy.Ui.Models"
                        xmlns:h="clr-namespace:Spravy.Ui.Helpers"
                        xmlns:ct="clr-namespace:ColorTextBlock.Avalonia;assembly=ColorTextBlock.Avalonia"
                        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
                        x:Class="Spravy.Ui.Features.ToDo.Views.ToDoItemView"
                        x:DataType="vm:ToDoItemViewModel">
    <Interaction.Behaviors>
        <EventTriggerBehavior EventName="Initialized">
            <InvokeCommandAction Command="{Binding Commands.InitializedCommand.Command}" CommandParameter="{Binding}" />
        </EventTriggerBehavior>
    </Interaction.Behaviors>

    <UserControl.Styles>
        <Style Selector="ItemsControl.adaptive-to-Do-item-view">
            <Setter Property="(Interaction.Behaviors)">
                <BehaviorCollectionTemplate>
                    <BehaviorCollection>
                        <AdaptiveBehavior SourceControl="{Binding $parent[TopLevel]}">
                            <AdaptiveClassSetter MinWidth="0"
                                                 MaxWidth="{x:Static h:MaterialDesignSize.MinMedium}"
                                                 ClassName="small" />
                            <AdaptiveClassSetter MinWidth="{x:Static h:MaterialDesignSize.MinMedium}"
                                                 MaxWidth="Infinity"
                                                 ClassName="wide" />
                        </AdaptiveBehavior>
                    </BehaviorCollection>
                </BehaviorCollectionTemplate>
            </Setter>
        </Style>

        <Style Selector="Button.adaptive-to-Do-item-view">
            <Setter Property="(Interaction.Behaviors)">
                <BehaviorCollectionTemplate>
                    <BehaviorCollection>
                        <AdaptiveBehavior SourceControl="{Binding $parent[TopLevel]}">
                            <AdaptiveClassSetter MinWidth="0"
                                                 MaxWidth="{x:Static h:MaterialDesignSize.MinMedium}"
                                                 ClassName="small" />
                            <AdaptiveClassSetter MinWidth="{x:Static h:MaterialDesignSize.MinMedium}"
                                                 MaxWidth="Infinity"
                                                 ClassName="wide" />
                        </AdaptiveBehavior>
                    </BehaviorCollection>
                </BehaviorCollectionTemplate>
            </Setter>
        </Style>

        <Style Selector="ItemsControl.small">
            <Setter Property="IsVisible" Value="False" />
        </Style>

        <Style Selector="ItemsControl.wide">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <Style Selector="Button.small">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <Style Selector="Button.wide">
            <Setter Property="IsVisible" Value="False" />
        </Style>
    </UserControl.Styles>

    <Grid RowDefinitions="Auto, Auto,*">
        <Grid RowDefinitions="*,4">
            <Panel>
                <Grid ColumnDefinitions="Auto,*,Auto">
                    <StackPanel Orientation="Horizontal">
                        <Button Classes="Basic" Command="{x:Static h:UiHelper.SwitchPane}">
                            <PathIcon Data="{x:Static co:Icons.Menu}" />
                        </Button>

                        <Button Classes="Basic mode-press" Command="{Binding Commands.NavigateToCurrentToDo.Command}">
                            <mi:MaterialIcon Kind="ArrowRight" />
                        </Button>
                    </StackPanel>

                    <ScrollViewer Grid.Column="1"
                                  VerticalScrollBarVisibility="Disabled"
                                  HorizontalScrollBarVisibility="Auto"
                                  HorizontalAlignment="Left"
                                  Classes="mini">
                        <TextBlock Text="{Binding Item.Name}" Classes="h3" />
                    </ScrollViewer>

                    <Panel Grid.Column="2"
                           IsVisible="{Binding CommandItems.Count, Converter={StaticResource Int32ToIsVisibleConverter}}">
                        <ItemsControl HorizontalAlignment="Right"
                                      VerticalAlignment="Center"
                                      ItemsSource="{Binding CommandItems}"
                                      Classes="adaptive-to-Do-item-view">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Orientation="Horizontal" />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>

                            <ItemsControl.DataTemplates>
                                <DataTemplate DataType="sm:SpravyCommandNotify">
                                    <Button Classes="Basic mode-press"
                                            Command="{Binding Item.Command}"
                                            CommandParameter="{Binding $parent[v:ToDoItemView].MainViewModel.Item}"
                                            Content="{Binding Kind}" />
                                </DataTemplate>
                            </ItemsControl.DataTemplates>
                        </ItemsControl>

                        <Button Classes="adaptive-to-Do-item-view Basic mode-press">
                            <Button.DataTemplates>
                                <DataTemplate x:DataType="sm:SpravyCommandNotify">
                                    <ContentControl Content="{Binding Text}" />
                                </DataTemplate>
                            </Button.DataTemplates>

                            <Button.Styles>
                                <Style Selector="MenuItem" x:DataType="sm:SpravyCommandNotify">
                                    <Setter Property="Command" Value="{Binding Item.Command}" />
                                    <Setter Property="CommandParameter"
                                            Value="{Binding $parent[v:ToDoItemView].MainViewModel.Item}" />
                                    <Setter Property="Icon" Value="{Binding Kind}" />
                                </Style>
                            </Button.Styles>

                            <Button.Flyout>
                                <MenuFlyout ItemsSource="{Binding CommandItems}" />
                            </Button.Flyout>

                            <mi:MaterialIcon Kind="DotsHorizontal" />
                        </Button>
                    </Panel>
                </Grid>
            </Panel>

            <Rectangle Grid.Row="1"
                       Fill="{Binding Item.Status, Converter={StaticResource ToDoItemStatusToBrushValueConverter}}" />
        </Grid>

        <ScrollViewer Grid.Row="1"
                      Classes="mini"
                      VerticalScrollBarVisibility="Disabled"
                      HorizontalScrollBarVisibility="Auto"
                      Margin="8,0,0,0">
            <c:Stepper Steps="{Binding Item.Path}" Index="0" HorizontalAlignment="Center">
                <c:Stepper.DataTemplates>
                    <DataTemplate DataType="m:ToDoItemEntityNotify">
                        <Button Classes="Basic"
                                Command="{x:Static h:UiHelper.NavigateToToDoItem}"
                                CommandParameter="{Binding}"
                                Content="{Binding Name}" />
                    </DataTemplate>
                </c:Stepper.DataTemplates>
            </c:Stepper>
        </ScrollViewer>

        <ScrollViewer Classes="mini" Grid.Row="2">
            <StackPanel>
                <Expander Margin="3"
                          IsExpanded="{Binding Item.Description, Mode=OneWay, Converter={StaticResource NullOrWhiteSpaceToBooleanValueConverterReverse}}">
                    <Expander.Header>
                        <Button Command="{x:Static h:UiHelper.SetToDoItemDescription}"
                                CommandParameter="{Binding Item}"
                                Classes="Basic mode-press"
                                Margin="0"
                                Padding="0">
                            <StackPanel Orientation="Horizontal">
                                <mi:MaterialIcon Kind="Pencil" Margin="0,0,3,0" />
                                <TextBlock Text="{DynamicResource ToDoItemView.Description}" Classes="alignment-center" />
                            </StackPanel>
                        </Button>
                    </Expander.Header>

                    <Panel>
                        <TextBlock Name="{x:Static v:ToDoItemView.PlainTextTextBlockName}"
                                   IsVisible="{Binding Item.IsDescriptionPlainText}"
                                   Text="{Binding Item.Description}" />

                        <md:MarkdownScrollViewer
                            Name="{x:Static v:ToDoItemView.MarkdownTextMarkdownScrollViewerName}"
                            IsVisible="{Binding Item.IsDescriptionMarkdownText}"
                            Markdown="{Binding Item.Description}">
                            <md:MarkdownScrollViewer.Styles>
                                <Style Selector="Border.Table">
                                    <Setter Property="BorderThickness" Value="0" />
                                </Style>

                                <Style Selector="Border.TableHeader">
                                    <Setter Property="Background" Value="{DynamicResource SukiCardBackground}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource SukiControlBorderBrush}" />
                                    <Setter Property="BorderThickness" Value="0,0,1,1" />
                                </Style>

                                <Style Selector="Border.OddTableRow">
                                    <Setter Property="Background" Value="{DynamicResource SukiBackground}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource SukiControlBorderBrush}" />
                                    <Setter Property="BorderThickness" Value="0,0,1,1" />
                                </Style>

                                <Style Selector="Border.EvenTableRow">
                                    <Setter Property="Background" Value="{DynamicResource SukiStrongBackground}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource SukiControlBorderBrush}" />
                                    <Setter Property="BorderThickness" Value="0,0,1,1" />
                                </Style>

                                <Style Selector="ct|CHyperlink">
                                    <Setter Property="Foreground" Value="{DynamicResource SukiPrimaryColor}" />
                                </Style>

                                <Style Selector="ct|CHyperlink:pointerover">
                                    <Setter Property="Foreground" Value="{DynamicResource SukiAccentColor50}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource SukiAccentColor50}" />
                                </Style>

                                <Style Selector="ct|CHyperlink:pressed">
                                    <Setter Property="Foreground" Value="{DynamicResource SukiAccentColor}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource SukiAccentColor}" />
                                </Style>
                            </md:MarkdownScrollViewer.Styles>
                        </md:MarkdownScrollViewer>
                    </Panel>
                </Expander>

                <ContentControl Content="{Binding ToDoSubItemsViewModel}" />
                <ContentControl Content="{Binding FastAddToDoItemViewModel}" />
            </StackPanel>
        </ScrollViewer>
    </Grid>
</ru:ReactiveUserControl>