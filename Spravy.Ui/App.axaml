<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:models="clr-namespace:Spravy.Ui.Models"
             xmlns:avalonia="clr-namespace:Material.Icons.Avalonia;assembly=Material.Icons.Avalonia"
             xmlns:dialogHostAvalonia="clr-namespace:DialogHostAvalonia;assembly=DialogHost.Avalonia"
             xmlns:viewModels="clr-namespace:Spravy.Ui.ViewModels"
             xmlns:services="clr-namespace:Spravy.Ui.Services"
             xmlns:sukiUi="clr-namespace:SukiUI;assembly=SukiUI"
             xmlns:controls="clr-namespace:SukiUI.Controls;assembly=SukiUI"
             xmlns:icons="clr-namespace:Material.Icons;assembly=Material.Icons"
             x:Class="Spravy.Ui.App"
             RequestedThemeVariant="Dark">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceInclude Source="Assets/Lang/en-US.axaml" />
                <ResourceInclude Source="Styles/Resources.axaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>

    <Application.Styles>
        <sukiUi:SukiTheme ThemeColor="Green" />
        <avalonia:MaterialIconStyles />
        <dialogHostAvalonia:DialogHostStyles />
        <StyleInclude Source="avares://Spravy.Ui/Styles/Theme.axaml" />
    </Application.Styles>

    <Application.DataTemplates>
        <DataTemplate x:DataType="services:EmptyApplySettings" />

        <DataTemplate x:DataType="models:DayOfYearSelectItem">
            <ContentControl Content="{Binding Days}" />
        </DataTemplate>

        <DataTemplate x:DataType="models:DayOfMonthSelectItem">
            <StackPanel Margin="5">
                <CheckBox IsChecked="{Binding IsSelected}"
                          HorizontalAlignment="Center" />
                <TextBlock Text="{Binding Day}" />
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:DataType="models:DayOfWeekSelectItem">
            <ToggleButton IsChecked="{Binding IsSelected}" Content="{Binding DayOfWeek}" />
        </DataTemplate>

        <DataTemplate x:DataType="models:TimerItemToDoItemFavoriteNotify">
            <StackPanel>
                <CheckBox IsChecked="{Binding IsFavorite}" />
                <TextBlock Text="{Binding DueDateTime, StringFormat=\{0:yyyy.MM.dd HH:mm zzz\}}" />
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:DataType="models:CommandItem">
            <Button Classes="Basic" Command="{Binding Command}" CommandParameter="{Binding Parameter}">
                <avalonia:MaterialIcon Kind="{Binding Icon}" />
            </Button>
        </DataTemplate>

        <TreeDataTemplate DataType="models:ToDoSelectorItemNotify" ItemsSource="{Binding Children}">
            <TextBlock Text="{Binding Name}" />
        </TreeDataTemplate>

        <DataTemplate DataType="models:ToDoItemParentNotify">
            <Button Command="{x:Static services:CommandStorage.NavigateToToDoItemCommand}"
                    CommandParameter="{Binding Id}"
                    Content="{Binding Name}"
                    Classes="Basic" />
        </DataTemplate>

        <DataTemplate DataType="models:RootItem">
            <Button Command="{x:Static services:CommandStorage.NavigateToCommand}"
                    CommandParameter="{x:Type viewModels:RootToDoItemsViewModel}"
                    Content="{x:Static icons:MaterialIconKind.Home}"
                    Classes="Basic" />
        </DataTemplate>

        <DataTemplate DataType="models:ToDoShortItemNotify">
            <TextBlock Text="{Binding Name}" />
        </DataTemplate>

        <DataTemplate DataType="icons:MaterialIconKind">
            <avalonia:MaterialIcon Kind="{Binding}" />
        </DataTemplate>

        <DataTemplate>
            <DataTemplate.DataType>
                <x:Type TypeName="models:Selected" x:TypeArguments="models:ToDoItemNotify" />
            </DataTemplate.DataType>

            <controls:GlassCard Command="{x:Static services:CommandStorage.NavigateToToDoItemCommand}"
                                CommandParameter="{Binding Value.Id}"
                                IsInteractive="True">
                <Grid ColumnDefinitions="*,Auto"
                      RowDefinitions="Auto,*"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      Margin="5">
                    <Grid Grid.ColumnSpan="2" ColumnDefinitions="Auto,Auto,*,Auto,Auto">
                        <Rectangle Width="15"
                                   Margin="0,0,3,0"
                                   Height="2"
                                   Fill="{Binding Value.Status, Converter={StaticResource ToDoItemStatusToBrushValueConverter}}" />
                        <TextBlock Grid.Column="1"
                                   Text="{Binding Value.Type, Converter={StaticResource ToDoItemTypeLocalizationValueConverter}}"
                                   Classes="Body2" />
                        <Rectangle Grid.Column="2"
                                   Margin="3,0,3,0"
                                   Height="2"
                                   Fill="{Binding Value.Status, Converter={StaticResource ToDoItemStatusToBrushValueConverter}}" />
                        <TextBlock Grid.Column="3"
                                   Text="{Binding Value.Status, Converter={StaticResource ToDoItemStatusLocalizationValueConverter}}"
                                   Classes="Body2" />
                        <Rectangle Grid.Column="4"
                                   Width="15"
                                   Margin="3,0,0,0"
                                   Height="2"
                                   Fill="{Binding Value.Status, Converter={StaticResource ToDoItemStatusToBrushValueConverter}}" />
                    </Grid>

                    <StackPanel Grid.Row="1">
                        <WrapPanel Orientation="Horizontal">
                            <ToggleButton Classes="Switch"
                                          Command="{x:Static services:CommandStorage.SwitchCompleteToDoItemCommand}"
                                          CommandParameter="{Binding Value}"
                                          IsVisible="{Binding Value.IsCan, Converter={StaticResource ToDoItemCanNoneToBooleanReverseConverter}}"
                                          IsChecked="{Binding Value.IsCan, Mode=OneWay, Converter={StaticResource ToDoItemCanCompleteToBooleanConverter}}" />

                            <TextBlock Text="{Binding Value.Name}"
                                       Classes="h4"
                                       TextWrapping="Wrap"
                                       VerticalAlignment="Center" />
                        </WrapPanel>

                        <Grid ColumnDefinitions="*,*,*" HorizontalAlignment="Left">
                            <Button Grid.ColumnSpan="3"
                                    Margin="0,5,5,5"
                                    IsVisible="{Binding Value.Active, Converter={StaticResource NullToBooleanConverter}}"
                                    CommandParameter="{Binding Value.Active.Id}"
                                    Command="{x:Static services:CommandStorage.NavigateToToDoItemCommand}">
                                <WrapPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding Value.Active.Name}"
                                               TextWrapping="Wrap"
                                               VerticalAlignment="Center" />
                                    <avalonia:MaterialIcon Margin="5,0,0,0" Kind="ArrowRight" />
                                </WrapPanel>
                            </Button>
                        </Grid>
                    </StackPanel>

                    <Grid Grid.Row="1"
                          Grid.Column="1"
                          ColumnDefinitions="Auto,Auto"
                          RowDefinitions="Auto,Auto">
                        <Button CommandParameter="{Binding Value}">
                            <Button.DataTemplates>
                                <DataTemplate x:DataType="models:CommandItem">
                                    <TextBlock Text="{Binding Name}" />
                                </DataTemplate>
                            </Button.DataTemplates>

                            <Button.Styles>
                                <Style Selector="MenuItem" x:DataType="models:CommandItem">
                                    <Setter Property="Command" Value="{Binding Command}" />
                                    <Setter Property="CommandParameter" Value="{Binding Parameter}" />
                                    <Setter Property="Icon" Value="{Binding Icon}" />
                                </Style>
                            </Button.Styles>

                            <Button.Flyout>
                                <MenuFlyout ItemsSource="{Binding Value.Commands}" />
                            </Button.Flyout>

                            <avalonia:MaterialIcon Kind="DotsHorizontal" />
                        </Button>

                        <Panel Grid.Column="1">
                            <Button CommandParameter="{Binding Value.Id}"
                                    Command="{x:Static services:CommandStorage.RemoveToDoItemFromFavoriteCommand}"
                                    IsVisible="{Binding Value.IsFavorite}">
                                <avalonia:MaterialIcon Kind="Star" />
                            </Button>

                            <Button CommandParameter="{Binding Value.Id}"
                                    Command="{x:Static services:CommandStorage.AddToDoItemToFavoriteCommand}"
                                    IsVisible="{Binding Value.IsFavorite, Converter={StaticResource ReverseBooleanValueConverter}}">
                                <avalonia:MaterialIcon Kind="StarOutline" />
                            </Button>
                        </Panel>

                        <Button Grid.Row="1"
                                Grid.Column="1"
                                Command="{x:Static services:CommandStorage.OpenLinkCommand}"
                                CommandParameter="{Binding Value}"
                                IsVisible="{Binding Value.Link, Converter={StaticResource NullOrWhiteSpaceToBooleanValueConverterReverse}}">
                            <avalonia:MaterialIcon Kind="Link" />
                        </Button>
                    </Grid>
                </Grid>
            </controls:GlassCard>
        </DataTemplate>
    </Application.DataTemplates>
</Application>