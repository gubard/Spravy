<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:m="clr-namespace:Spravy.Ui.Models"
             xmlns:mi="clr-namespace:Material.Icons.Avalonia;assembly=Material.Icons.Avalonia"
             xmlns:dh="clr-namespace:DialogHostAvalonia;assembly=DialogHost.Avalonia"
             xmlns:s="clr-namespace:Spravy.Ui.Services"
             xmlns:su="clr-namespace:SukiUI;assembly=SukiUI"
             xmlns:i="clr-namespace:Material.Icons;assembly=Material.Icons"
             xmlns:c="clr-namespace:SukiUI.Controls;assembly=SukiUI"
             xmlns:pm="clr-namespace:Spravy.Ui.Features.PasswordGenerator.Models"
             xmlns:lm="clr-namespace:Spravy.Ui.Features.Localizations.Models"
             xmlns:viewModels="clr-namespace:Spravy.Ui.Features.ToDo.ViewModels"
             xmlns:models="clr-namespace:Spravy.Ui.Features.ToDo.Models"
             x:Class="Spravy.Ui.App"
             RequestedThemeVariant="Dark">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceInclude Source="Assets/Lang/en-US.axaml" />
                <ResourceInclude Source="Styles/Resources.axaml" />
                <ResourceInclude Source="Styles/SingleView.axaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>

    <Application.Styles>
        <su:SukiTheme ThemeColor="Green" />
        <mi:MaterialIconStyles />
        <dh:DialogHostStyles />
        <StyleInclude Source="avares://Spravy.Ui/Styles/Theme.axaml" />
    </Application.Styles>

    <Application.DataTemplates>
        <DataTemplate x:DataType="lm:Header4Localization">
            <TextBlock Text="{Binding Text}" Classes="h4 text-wrap" />
        </DataTemplate>

        <DataTemplate x:DataType="lm:Header3Localization">
            <TextBlock Text="{Binding Text}" Classes="h3 text-wrap" />
        </DataTemplate>

        <DataTemplate x:DataType="lm:TextLocalization">
            <TextBlock Text="{Binding Text}"
                       Classes="text-wrap alignment-center"
                       Foreground="{DynamicResource SukiText}" />
        </DataTemplate>

        <DataTemplate x:DataType="pm:PasswordItemNotify">
            <Button Classes="alignment-stretch glass-card content-alignment-stretch"
                    Command="{x:Static s:CommandStorage.GeneratePasswordCommand}"
                    CommandParameter="{Binding}">
                <Grid ColumnDefinitions="*,Auto">
                    <TextBlock Classes="text-wrap h4" Text="{Binding Name}" />

                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                        <Button Content="{x:Static i:MaterialIconKind.Settings}"
                                Command="{x:Static s:CommandStorage.ShowPasswordItemSettingCommand}"
                                CommandParameter="{Binding}" />
                        <Button Content="{x:Static i:MaterialIconKind.Delete}"
                                Command="{Binding DeletePasswordItem.Command}" />
                    </StackPanel>
                </Grid>
            </Button>
        </DataTemplate>

        <DataTemplate x:DataType="s:EmptyApplySettings" />

        <DataTemplate x:DataType="m:DayOfYearSelectItem">
            <ItemsControl ItemsSource="{Binding Days}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </DataTemplate>

        <DataTemplate x:DataType="m:DayOfMonthSelectItem">
            <ToggleButton IsChecked="{Binding IsSelected}" Content="{Binding Day}" />
        </DataTemplate>

        <DataTemplate x:DataType="m:DayOfWeekSelectItem">
            <ToggleButton IsChecked="{Binding IsSelected}" Content="{Binding DayOfWeek}" />
        </DataTemplate>

        <DataTemplate x:DataType="m:TimerItemToDoItemFavoriteNotify">
            <StackPanel>
                <CheckBox IsChecked="{Binding IsFavorite}" />
                <TextBlock Text="{Binding DueDateTime, StringFormat=\{0:yyyy.MM.dd HH:mm zzz\}}" />
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:DataType="m:CommandItem">
            <Button Classes="Basic" Command="{Binding Command}" CommandParameter="{Binding Parameter}">
                <mi:MaterialIcon Kind="{Binding Icon}" />
            </Button>
        </DataTemplate>

        <TreeDataTemplate DataType="models:ToDoSelectorItemNotify" ItemsSource="{Binding Children}">
            <TextBlock Text="{Binding Name}" />
        </TreeDataTemplate>

        <DataTemplate DataType="models:ToDoItemParentNotify">
            <Button Command="{x:Static s:CommandStorage.NavigateToToDoItemCommand}"
                    CommandParameter="{Binding Id}"
                    Content="{Binding Name}"
                    Classes="Basic" />
        </DataTemplate>

        <DataTemplate DataType="m:RootItem">
            <Button Command="{x:Static s:CommandStorage.NavigateToCommand}"
                    CommandParameter="{x:Type viewModels:RootToDoItemsViewModel}"
                    Content="{x:Static i:MaterialIconKind.Home}"
                    Classes="Basic" />
        </DataTemplate>

        <DataTemplate DataType="models:ToDoShortItemNotify">
            <TextBlock Text="{Binding Name}" />
        </DataTemplate>

        <DataTemplate DataType="i:MaterialIconKind">
            <mi:MaterialIcon Kind="{Binding}" />
        </DataTemplate>

        <DataTemplate>
            <DataTemplate.DataType>
                <x:Type TypeName="m:Selected" x:TypeArguments="models:ToDoItemNotify" />
            </DataTemplate.DataType>

            <c:BusyArea IsBusy="{Binding Value.IsBusy}">
                <Button Command="{x:Static s:CommandStorage.NavigateToToDoItemCommand}"
                        CommandParameter="{Binding Value.CurrentId}"
                        Classes="alignment-stretch glass-card content-alignment-stretch">
                    <Grid ColumnDefinitions="*,Auto" RowDefinitions="Auto,*">
                        <Grid Grid.ColumnSpan="2" ColumnDefinitions="Auto,Auto,*,Auto,Auto">
                            <Rectangle Width="15"
                                       Margin="0,0,3,0"
                                       Height="2"
                                       Fill="{Binding Value.Status, Converter={StaticResource ToDoItemStatusToBrushValueConverter}}" />
                            <TextBlock Grid.Column="1"
                                       Text="{Binding Value.Type, Converter={StaticResource ToDoItemTypeLocalizationValueConverter}}" />
                            <Rectangle Grid.Column="2"
                                       Margin="3,0,3,0"
                                       Height="2"
                                       Fill="{Binding Value.Status, Converter={StaticResource ToDoItemStatusToBrushValueConverter}}" />
                            <TextBlock Grid.Column="3"
                                       Text="{Binding Value.Status, Converter={StaticResource ToDoItemStatusLocalizationValueConverter}}" />
                            <Rectangle Grid.Column="4"
                                       Width="15"
                                       Margin="3,0,0,0"
                                       Height="2"
                                       Fill="{Binding Value.Status, Converter={StaticResource ToDoItemStatusToBrushValueConverter}}" />
                        </Grid>

                        <StackPanel Grid.Row="1">
                            <Grid ColumnDefinitions="Auto,*">
                                <ToggleButton Classes="Switch alignment-top"
                                              Margin="5,5,0,0"
                                              Command="{Binding Value.CompleteCommand}"
                                              CommandParameter="{Binding Value}"
                                              IsVisible="{Binding Value.IsCan, Converter={StaticResource ToDoItemCanNoneToBooleanReverseConverter}}"
                                              IsChecked="{Binding Value.IsCan, Mode=OneWay, Converter={StaticResource ToDoItemCanCompleteToBooleanConverter}}" />
                                <TextBlock Grid.Column="1"
                                           Classes="h4 vertical-alignment-center"
                                           Text="{Binding Value.Name}"
                                           TextWrapping="Wrap" />
                            </Grid>

                            <Button
                                IsVisible="{Binding Value.Active, Converter={StaticResource NullToBooleanConverter}}"
                                CommandParameter="{Binding Value.Active.Id}"
                                Command="{x:Static s:CommandStorage.NavigateToToDoItemCommand}">
                                <TextBlock Text="{Binding Value.Active.Name}"
                                           TextWrapping="Wrap" />
                            </Button>
                        </StackPanel>

                        <Grid Grid.Row="1"
                              Grid.Column="1"
                              ColumnDefinitions="Auto,Auto"
                              RowDefinitions="Auto,Auto">
                            <Button CommandParameter="{Binding Value}">
                                <Button.DataTemplates>
                                    <DataTemplate x:DataType="m:CommandItem">
                                        <TextBlock Text="{Binding Name}" />
                                    </DataTemplate>
                                </Button.DataTemplates>

                                <Button.Styles>
                                    <Style Selector="MenuItem" x:DataType="m:CommandItem">
                                        <Setter Property="Command" Value="{Binding Command}" />
                                        <Setter Property="CommandParameter" Value="{Binding Parameter}" />
                                        <Setter Property="Icon" Value="{Binding Icon}" />
                                    </Style>
                                </Button.Styles>

                                <Button.Flyout>
                                    <MenuFlyout ItemsSource="{Binding Value.Commands}" />
                                </Button.Flyout>

                                <mi:MaterialIcon Kind="DotsHorizontal" />
                            </Button>

                            <Panel Grid.Column="1">
                                <Button CommandParameter="{Binding Value.CurrentId}"
                                        Command="{x:Static s:CommandStorage.RemoveToDoItemFromFavoriteCommand}"
                                        IsVisible="{Binding Value.IsFavorite}">
                                    <mi:MaterialIcon Kind="Star" />
                                </Button>

                                <Button CommandParameter="{Binding Value.CurrentId}"
                                        Command="{x:Static s:CommandStorage.AddToDoItemToFavoriteCommand}"
                                        IsVisible="{Binding Value.IsFavorite, Converter={StaticResource ReverseBooleanValueConverter}}">
                                    <mi:MaterialIcon Kind="StarOutline" />
                                </Button>
                            </Panel>

                            <Button Grid.Row="1"
                                    Grid.Column="1"
                                    Command="{x:Static s:CommandStorage.OpenLinkCommand}"
                                    CommandParameter="{Binding Value}"
                                    IsVisible="{Binding Value.Link, Converter={StaticResource NullOrWhiteSpaceToBooleanValueConverterReverse}}">
                                <mi:MaterialIcon Kind="Link" />
                            </Button>
                        </Grid>
                    </Grid>
                </Button>
            </c:BusyArea>
        </DataTemplate>
    </Application.DataTemplates>
</Application>