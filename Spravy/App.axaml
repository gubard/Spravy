<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:models="clr-namespace:Spravy.Models"
             xmlns:interfaces="clr-namespace:Spravy.Interfaces"
             xmlns:handlers="clr-namespace:Spravy.Handlers"
             xmlns:converters="clr-namespace:ExtensionFramework.AvaloniaUi.Converters;assembly=ExtensionFramework.AvaloniaUi"
             xmlns:converters1="clr-namespace:Spravy.Converters"
             xmlns:themes="clr-namespace:Material.Styles.Themes;assembly=Material.Styles"
             x:Class="Spravy.App"
             RequestedThemeVariant="Dark">
    <Application.Styles>
        <FluentTheme DensityStyle="Compact" />
        <StyleInclude Source="avares://ExtensionFramework.AvaloniaUi/Styles/Theme.axaml" />
        <themes:MaterialTheme BaseTheme="Dark" PrimaryColor="Purple" SecondaryColor="Lime" />

        <Style Selector="ListBox.ItemsDragAndDrop">
            <Style.Resources>
                <handlers:ItemsListBoxDropHandlerToDoItemNotify x:Key="ItemsListBoxDropHandler" />
            </Style.Resources>

            <Setter Property="(Interaction.Behaviors)">
                <BehaviorCollectionTemplate>
                    <BehaviorCollection>
                        <ContextDropBehavior Handler="{StaticResource ItemsListBoxDropHandler}" />
                    </BehaviorCollection>
                </BehaviorCollectionTemplate>
            </Setter>
        </Style>

        <Style Selector="ListBox.ItemsDragAndDrop ListBoxItem">
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="(Interaction.Behaviors)">
                <BehaviorCollectionTemplate>
                    <BehaviorCollection>
                        <ContextDragBehavior HorizontalDragThreshold="3" VerticalDragThreshold="3" />
                    </BehaviorCollection>
                </BehaviorCollectionTemplate>
            </Setter>
        </Style>
    </Application.Styles>

    <Application.DataTemplates>
        <DataTemplate DataType="models:ToDoItemNotify">
            <Grid ColumnDefinitions="Auto,*" ToolTip.Tip="{Binding Description}">
                <Rectangle Width="10"
                           Fill="{Binding Status, Converter={StaticResource ToDoItemStatusToBrushValueConverter}}" />

                <Grid Grid.Column="1" ColumnDefinitions="*,*"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch">
                    <StackPanel HorizontalAlignment="Left">
                        <StackPanel Orientation="Horizontal">
                            <CheckBox IsChecked="{Binding IsComplete}" />

                            <TextBlock Text="{Binding Name}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding CompletedCount}" />

                            <DatePicker
                                IsVisible="{Binding DueDate, Converter={StaticResource ObjectToVisibleValueConverter}}"
                                SelectedDate="{Binding DueDate}"
                                IsEnabled="False"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center" />
                        </StackPanel>
                    </StackPanel>

                    <Button Grid.Column="1"
                            Command="{Binding $parent[interfaces:IToDoItemView].DeleteSubToDoItemCommand}"
                            CommandParameter="{Binding}"
                            Content="Delete"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            HorizontalContentAlignment="Right" />
                </Grid>
            </Grid>
        </DataTemplate>
    </Application.DataTemplates>

    <Application.Resources>
        <converters:ObjectToVisibleValueConverter x:Key="ObjectToVisibleValueConverter" />
        <converters1:ToDoItemStatusToBrushValueConverter x:Key="ToDoItemStatusToBrushValueConverter" />
    </Application.Resources>
</Application>